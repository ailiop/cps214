#! /usr/bin/ns

#
# SCRIPT
#
#     multiAS-fullospf-1pc.ns
#
# DESCRIPTION
#
#     Create a multi-AS topology, where every AS is comprised of
#     routers over full-mesh OSPF and each router is connected to 1 PC
#     via a LAN connection. Route information is exchanged among ASs
#     via BGP.
#
#     The inter-AS network topology is as follows:
#       ---------      ---------      ---------      ---------
#       | AS 40 |------| AS 10 |------| AS 30 |------| AS 50 |
#       ---------      ---------      ---------      ---------
#                          |                             |
#                          |                             |
#                      ---------                         |
#                      | AS 20 |-------------------------/
#                      ---------
#
#     Any two connected ASs share only 1 link, between their
#     respective #1 (SN) routers. The exceptions are the outgoing
#     links to AS 20, which are incident from the #2 routers of ASs 10
#     and 50.
#
#     The ASs are assigned IP prefixes in the following fashion:
#       - Inter-AS links: 100.100.100.(X+Y)
#           where X is the AS number and Y is the router's serial
#           number.
#       - Intra-AS inter-router links: X.0.0.Y
#           where X is the AS number and Y is the router's serial
#           number.
#       - LAN links (router-pc): X.0.Y.{1|2}
#           where X is the AS number and Y is the router's serial
#           number. The last octet is 1 for routers and 2 for PCs.
#
# PARAMETERS
#
#     AS_SIZE
#         Number of router nodes in each AS. (All ASs will have the
#         same number of nodes.) Every router node in an AS will be
#         connected with every other router node in the AS.
#
#     {PC|RT}_OS
#         The OS image to be loaded in the PC or router nodes.
#
#     {LAN|INT|EXT}_BW
#         Bandwidth of the LAN, intra-AS or inter-AS links.
#
#     {LAN|INT|EXT}_DL
#         Delay on the LAN, intra-AS or inter-AS links.
#
#     {INT|EXT}_Qt
#         Queue type for the intra-AS or inter-AS links.
#
#     {LAN|INT|EXT}_IF
#         Interface name to be used for LAN, intra-AS or inter-AS
#         links.
#
#     EXT_PREF
#         3-octet (24-bit) prefix that identifies the inter-AS IP
#         class.
#
#     MASK
#         Subnet mask for all IP prefixes. Essentially defines their
#         CIDR class.
#
#     {PC|RT}_START_CMD
#         A command to be issued to every node on start-up.
#
#     START_LOG
#         File to redirect all of the start-up command's output to.
#
# AUTHOR
#
#     Alexandros-Stavros Iliopoulos <ailiop@cs.duke.edu>
#



##################################################
### INCLUDE

source tb_compat.tcl



##################################################
### PARAMETERS

set opt(AS_SIZE) 2

set opt(PC_OS) FBSD9-RON
set opt(RT_OS) UBUNTU11-64-QUAGGA

set opt(LAN_BW) 100Mb
set opt(LAN_DL) 20.0ms

set opt(INT_BW) 50Mb
set opt(INT_DL) 30.0ms
set opt(INT_Qt) DropTail

set opt(EXT_BW) 200Mb
set opt(EXT_DL) 75.0ms
set opt(EXT_Qt) DropTail

set opt(LAN_IF) eth1
set opt(INT_IF) eth2
set opt(EXT_IF) eth3

set opt(EXT_PREF) 100.100.100

set opt(MASK) 255.255.255.0

set opt(PC_START_CMD) ""
set opt(RT_START_CMD) "./prepare-quagga.csh"
set opt(START_LOG)    "/tmp/startup.log"



##################################################
### MAIN SCRIPT


# create the network simulator object
set ns [new Simulator]


## INTRA-AS CONFIGURATION

# construct the individual ASs
for {set a 10} {$a <= 50} {set a [expr $a + 10]} {
    
    # create the nodes
    for {set r 1} {$r <= $opt(AS_SIZE)} {incr r} {

	# routers
	set rt($a)($r) [$ns node]
	tb-set-node-os $rt($a)($r) $opt(RT_OS)

	# PCs
	set pc($a)($r) [$ns node]
	tb-set-node-os $pc($a)($r) $opt(PC_OS)

    }  ;# end for (counter r)
    
    # create the intra-AS links
    for {set ri 1} {$ri <= $opt(AS_SIZE)} {incr ri} {

	# router-PC (LAN) links
	set lan($a)($ri) [$ns make-lan "$rt($a)($ri) $pc($a)($ri)" $opt(LAN_BW) $opt(LAN_DL)]

	# router-router (INT) links
	for {set rj [expr $ri + 1]} {$rj <= $opt(AS_SIZE)} {incr rj} {
	    set int($a)($ri$rj) [$ns duplex-link $rt($a)($ri) $rt($a)($rj) $opt(INT_BW) $opt(INT_DL) $opt(INT_Qt)]
	}  ;# end for (counter rj)

    }  ;# end for (counter ri)

    # set up the IPs for intra-AS links
    # (for routers, also fix the interfaces)
    for {set ri 1} {$ri <= $opt(AS_SIZE)} {incr i} {

	# LAN links
	tb-set-ip-lan $pc($a)($ri) $lan($a)($ri) ${a}.0.${ri}.2
	tb-set-ip-lan $rt($a)($ri) $lan($a)($ri) ${a}.0.${ri}.1
	tb-fix-interface $rt($a)($ri) $lan($a)($ri) $opt(LAN_IF)

	# INT (router-to-router) links
	for {set rj 1} {$rj <= $opt(AS_SIZE)} {incr rj} {
	    if {$rj == $ri} {
		continue
	    }
	    tb-set-ip-link $rt($a)($ri) $int($a)($ri$rj) ${a}.0.0.${ri}${rj}
	    tb-fix-interface $rt($a)($ri) $int($a)($ri$rj) $opt(INT_IF)
	}  ;# end for (counter rj)

    }  ;# end for (counter ri)
    
    # set up the subnet masks for intra-AS links
    for {set ri 1} {$ri <= $opt(AS_SIZE)} {incr ri} {

	# LAN links
	tb-set-netmask $lan($a)($ri) $opt(MASK)

	# router-router links
	for {set rj [expr $ri + 1]} {$rj <= $opt(AS_SIZE)} {incr rj} {
	    tb-set-netmask $int($a)($ri$rj) $opt(MASK)
	}  ;# end for (counter rj)

    }  ;# end for (counter ri)

}  ;# end for (counter a)


## INTER-AS CONFIGURATION

# create the inter-AS links
set ext(1040) [$ns duplex-link $rt(10)(1) $rt(40)(1) $opt(EXT_BW) $opt(EXT_DL) $opt(EXT_Qt)]

set ext(1030) [$ns duplex-link $rt(10)(1) $rt(30)(1) $opt(EXT_BW) $opt(EXT_DL) $opt(EXT_Qt)]

set ext(3050) [$ns duplex-link $rt(30)(1) $rt(50)(1) $opt(EXT_BW) $opt(EXT_DL) $opt(EXT_Qt)]

set ext(1020) [$ns duplex-link $rt(10)(2) $rt(20)(1) $opt(EXT_BW) $opt(EXT_DL) $opt(EXT_Qt)]

set ext(2050) [$ns duplex-link $rt(20)(1) $rt(50)(2) $opt(EXT_BW) $opt(EXT_DL) $opt(EXT_Qt)]

# set up the IPs
tb-set-ip-link $rt(10)(1) $ext(1040) ${opt(EXT_PREF)}.11
tb-set-ip-link $rt(40)(1) $ext(1040) ${opt(EXT_PREF)}.41
tb-set-ip-link $rt(10)(1) $ext(1030) ${opt(EXT_PREF)}.11
tb-set-ip-link $rt(30)(1) $ext(1030) ${opt(EXT_PREF)}.31
tb-set-ip-link $rt(30)(1) $ext(3050) ${opt(EXT_PREF)}.31
tb-set-ip-link $rt(50)(1) $ext(3050) ${opt(EXT_PREF)}.51
tb-set-ip-link $rt(10)(2) $ext(1020) ${opt(EXT_PREF)}.12
tb-set-ip-link $rt(20)(1) $ext(1020) ${opt(EXT_PREF)}.21
tb-set-ip-link $rt(20)(1) $ext(2050) ${opt(EXT_PREF)}.21
tb-set-ip-link $rt(50)(2) $ext(2050) ${opt(EXT_PREF)}.52

# fix the interface names
tb-fix-interface $rt(10)(1) $ext(1040) $opt(EXT_IF)
tb-fix-interface $rt(40)(1) $ext(1040) $opt(EXT_IF)
tb-fix-interface $rt(10)(1) $ext(1030) $opt(EXT_IF)
tb-fix-interface $rt(30)(1) $ext(1030) $opt(EXT_IF)
tb-fix-interface $rt(30)(1) $ext(3050) $opt(EXT_IF)
tb-fix-interface $rt(50)(1) $ext(3050) $opt(EXT_IF)
tb-fix-interface $rt(10)(2) $ext(1020) $opt(EXT_IF)
tb-fix-interface $rt(20)(1) $ext(1020) $opt(EXT_IF)
tb-fix-interface $rt(20)(1) $ext(2050) $opt(EXT_IF)
tb-fix-interface $rt(50)(2) $ext(2050) $opt(EXT_IF)

# set the subnet masks
tb-set-netmask $ext(1040) $opt(MASK)
tb-set-netmask $ext(1030) $opt(MASK)
tb-set-netmask $ext(3050) $opt(MASK)
tb-set-netmask $ext(1020) $opt(MASK)
tb-set-netmask $ext(2050) $opt(MASK)


## NETWORK INVOCATION

# have nodes run the appropriate start-up script
for {set a 10} {$a <= 50} {set a [expr $a + 10]} {
    for {set r 1} {$r <= $opt(AS_SIZE)} {incr r} {
	# PCs
	tb-set-node-startcmd $pc($a)($r) "$opt(PC_START_CMD) >& $opt(START_LOG)"
	# routers
	tb-set-node-startcmd $rt($a)($r) "$opt(RT_START_CMD) >& $opt(START_LOG)"
    }  ;# end for (counter r)
}  ;# end for (counter a)

# go!
$ns run
