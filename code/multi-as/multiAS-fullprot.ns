#! /usr/bin/ns

#
# SCRIPT
#
#     multiAS-fullprot.ns
#
# DESCRIPTION
#
#     Create a multi-AS topology, where every AS is comprised of
#     routers over full-mesh OSPF. Route information is exchanged
#     among ASs via BGP.
#
#     Each AS contains a number of LANs, where each LAN is comprised
#     of a number of PC nodes and is connected to a single router of
#     the AS. Every LAN is connected to the router whose serial number
#     within the AS is equal to that of the LAN.
#
#     The network nodes are assigned IP prefixes in the following fashion:
#       - Inter-AS links: 192.168.0.E/30
#       - Intra-AS links: 176.12.A.I/30
#       - LAN links:      10.A.L.{254|P}   (* 254 if the node is a router *)
#           A is the AS number wherein a node is contained; L is a
#           LAN's serial number within an AS (equal to the
#           corresponding router's serial number); and P is a PC's
#           serial number within a LAN.
#           E and I are returned via corresponding global counters, so
#           that links are assigned contiguous /30 IP addresses.
#
# PARAMETERS
#
#     AS_NUM
#         Number of ASes in the whole network.
#
#     AS_SIZE
#         Number of router nodes in each AS. (All ASs will have the
#         same number of nodes.) Every router node in an AS will be
#         connected with every other router node in the AS.
#
#     LAN_NUM_AS
#         Number of LANs within each AS. Each LAN will only be
#         connected to a single router.
#
#     LAN_SIZE
#         Number of PCs comprising each LAN. (All LANs will have the
#         same number of PCs.)
#
#     {PC|RT}_OS
#         The OS image to be loaded in the PC or router nodes.
#
#     {LAN|INT|EXT}_BW
#         Bandwidth of the LAN, intra-AS or inter-AS links.
#
#     {LAN|INT|EXT}_DL
#         Delay on the LAN, intra-AS or inter-AS links.
#
#     {INT|EXT}_Qt
#         Queue type for the intra-AS or inter-AS links.
#
#     {LAN|INT|EXT}_IF
#         Interface name to be used for LAN, intra-AS or inter-AS
#         links.
#
#     LAN_PREF
#         The first octet of the IP space prefix wherein all LAN IPs for
#         the created topology will reside.
#
#     LAN_GW_IP
#         The router-node identifier in a LAN. This is the last octet
#         of a routers' IP address in a LAN.
#
#     {INT|EXT}_PREF
#         The first 2 octets of the IP space wherein the routers' IPs
#         for the intra-AS or inter-AS connections will reside in.
#
#     MASK_{LAN|INT|EXT}
#         Subnet mask for all IP prefixes over LAN, intra-AS or
#         inter-AS links. Essentially defines their CIDR class.
#
#     LINKS_LOG
#         The path to a log file that will be output by the
#         script. This log file will contain IP information about each
#         created link in the network topology.
#
#     EXT_DESC_FILE
#         The path to the descriptor file that defines the inter-AS
#         (EXT) links. The descriptor file must adhere to a specific
#         syntax: Lines are either comments (must *start* with a '#'
#         char), empty, or link descriptors. A link descriptor line
#         has the syntax
#             ASN_1 ROUTERIDX_1 ASN_2 ROUTERIDX_2
#         and instructs the instantiation of a duplex BGP session
#         between the two routers.
#
#     {PC|RT}_START_CMD
#         A command to be issued to every node on start-up.
#
#     START_LOG
#         File to redirect all of the start-up command's output to.
#
# LIMITATION
#
#     Due to the current IP assignment scheme (and the fact that all
#     IPs are set to be in the same /8 class), the number of routers
#     or ASes cannot be greater than 9. (This should not be too bad,
#     given that Emulab resources are limited anyway.)
#
# AUTHOR
#
#     Alexandros-Stavros Iliopoulos <ailiop@cs.duke.edu>
#



##################################################
### INCLUDE

source tb_compat.tcl



##################################################
### PARAMETERS

set opt(AS_NUM)  2
set opt(AS_SIZE) 2

set opt(LAN_NUM_AS) 1
set opt(LAN_SIZE)   1

set opt(PC_OS) FBSD9-RON
set opt(RT_OS) UBUNTU11-64-QUAGGA

set opt(LAN_BW) 100Mb
set opt(LAN_DL) 20.0ms

set opt(INT_BW) 50Mb
set opt(INT_DL) 30.0ms
set opt(INT_Qt) DropTail

set opt(EXT_BW) 200Mb
set opt(EXT_DL) 75.0ms
set opt(EXT_Qt) DropTail

set opt(LAN_PREF) 10
set opt(INT_PREF) 172.16
set opt(EXT_PREF) 192.168

set opt(LAN_GW_IP) 254

set opt(MASK_LAN) 255.255.255.0
set opt(MASK_INT) 255.255.255.252
set opt(MASK_EXT) 255.255.255.252

# set opt(LINKS_LOG)     "/users/ailiop/links.log"
set opt(LINKS_LOG)     "/proj/DukeCPS214/exp/multi-as-fullprot/links.log"

set opt(EXT_DESC_FILE) "/users/ailiop/inter-as-connections.txt"

set opt(PC_START_PROG) "/proj/DukeCSP214/exp/multi-as-fullprot/bin/startup-pc.csh"
set opt(RT_START_PROG) "/proj/DukeCPS214/exp/multi-as-fullprot/bin/startup-rt.csh"
set opt(START_LOG)     "/tmp/startup.log"



##################################################
### PROCEDURES

# 'get_ip30' receives the name of one of the two counters below,
# increments it by 4 and returns the result. This way, we can define
# /30 IPs for node-to-node links, thus conserving IP space.
set ipcnt_int -4
set ipcnt_ext -4
proc get_ip30 {ipcounter} {
    global $ipcounter
    incr $ipcounter 4
};  # end proc 'get_ip30'


# 'export_array' exports all information in an array to the specified
# file; each array entry is put in a separate line.
proc export_array {arrayname filename} {

    # have arr reference the actual array object
    upvar $arrayname arr

    # open a stream to the output file
    set fstream [open $filename w]

    # disable buffering for the output file stream
    fconfigure $fstream -buffering none

    # export the array's contents
    foreach {name value} [array get arr] {
	puts $fstream "$name $value"
    };  # end foreach

    # make sure the data are output
    flush $fstream

    # close the file stream
    close $fstream

};  # end proc 'export_array'


# 'export_array_unix' exports all information in an array to the
# specified file; each array entry is put in a separate line. The
# difference from 'export_array' is that this procedure makes use of
# UNIX-specific commands to create/truncate the output file and to
# write data into it.
proc export_array_unix {arrayname filename} {

    # # equivalent to what the 'w' option does with the 'open' TCL
    # # command; i.e. if the output file exists, it is truncated to zero
    # # length, otherwise an empty file is created.
    # exec "if (-e $filename) rm -f $filename; touch $filename"

    # create the output file, or truncate it to zero length if it
    # already exists
    set fstream [open $filename w]
    close $fstream

    # have arr reference the actual array object
    upvar $arrayname arr

    # export the array's contents
    foreach {name value} [array get arr] {
	exec echo $name $value >> $filename
    };  # end foreach

};  # end proc 'export_array_unix'



##################################################
### MAIN SCRIPT


# create the network simulator object
set ns [new Simulator]

# initialise an array to log any link that is created
set logarray() {}


## INTRA-AS CONFIGURATION

# construct the individual ASs
for {set a 1} {$a <= $opt(AS_NUM)} {incr a} {

    
    # NODES

    # create the router nodes
    for {set r 1} {$r <= $opt(AS_SIZE)} {incr r} {
	set rt($a-$r) [$ns node]
	tb-set-node-os $rt($a-$r) $opt(RT_OS)
    };  # end for (counter r)

    # create the PC node
    for {set l 1} {$l <= $opt(LAN_NUM_AS)} {incr l} {
	for {set p 1} {$p <= $opt(LAN_SIZE)} {incr p} {
	    set pc($a-$l-$p) [$ns node]
	    tb-set-node-os $pc($a-$l-$p) $opt(PC_OS)
	};  # end for (counter p)
    };  # end for (counter l)


    # LINKS & IPs
    
    # create the router/router (INT) links and set the IPs
    for {set ri 1} {$ri <= $opt(AS_SIZE)} {incr ri} {
    	for {set rj [expr $ri + 1]} {$rj <= $opt(AS_SIZE)} {incr rj} {

	    # link
    	    set int($a-$ri-$rj) [$ns duplex-link $rt($a-$ri) $rt($a-$rj) $opt(INT_BW) $opt(INT_DL) $opt(INT_Qt)]

	    # IPs
	    set ipcurr [get_ip30 ipcnt_int]
	    set ip1 $opt(INT_PREF).$a.[expr $ipcurr + 1]
	    set ip2 $opt(INT_PREF).$a.[expr $ipcurr + 2]
	    tb-set-ip-link $rt($a-$ri) $int($a-$ri-$rj) $ip1
	    tb-set-ip-link $rt($a-$rj) $int($a-$ri-$rj) $ip2

	    # log
	    set logarray(rt-$a-$ri,$ip1) rt-$a-$rj,$ip2
	    set logarray(rt-$a-$rj,$ip2) rt-$a-$ri,$ip1

    	};  # end for (counter rj)
    };  # end for (counter ri)
    
    # create the router/PC (LAN) links
    for {set l 1} {$l <= $opt(LAN_NUM_AS)} {incr l} {
	set lanstr "$rt($a-$l)"
	for {set p 1} {$p <= $opt(LAN_SIZE)} {incr p} {
	    append lanstr " $pc($a-$l-$p)"
	};  # end for (counter p)
	set lan($a-$l) [$ns make-lan "$lanstr" $opt(LAN_BW) $opt(LAN_DL)]
    };  # end for (counter l)

    # set the LAN IPs
    for {set l 1} {$l <= $opt(LAN_NUM_AS)} {incr l} {

	# router
	set ip $opt(LAN_PREF).$a.$l.$opt(LAN_GW_IP)
	tb-set-ip-lan $rt($a-$l) $lan($a-$l) $ip

	# log
	set logarray(rt-$a-$l,$ip) LAN

	# PCs
	for {set p 1} {$p <= $opt(LAN_SIZE)} {incr p} {
	    set ip $opt(LAN_PREF).$a.$l.$p
	    tb-set-ip-lan $pc($a-$l-$p) $lan($a-$l) $ip
	};  # end for (counter p)

    };  # end for (counter l)

    
    # MASKS
    
    # set up the subnet masks for INT links
    for {set ri 1} {$ri <= $opt(AS_SIZE)} {incr ri} {
    	for {set rj [expr $ri + 1]} {$rj <= $opt(AS_SIZE)} {incr rj} {
    	    tb-set-netmask $int($a-$ri-$rj) $opt(MASK_INT)
    	};  # end for (counter rj)
    };  # end for (counter ri)
    
    # set up the subnet masks for LAN links
    for {set l 1} {$l <= $opt(LAN_NUM_AS)} {incr l} {
	tb-set-netmask $lan($a-$l) $opt(MASK_LAN)
    };  # end for (counter l)

};  # end for (counter a)


## INTER-AS CONFIGURATION

# open a read stream to the inter-AS connections descriptor file
set descfile [open $opt(EXT_DESC_FILE) r]

# read the file until EOF is encountered
while {[set len [gets $descfile line]] >= 0} {

    # skip empty lines or lines starting with '#'
    if {!($len) || [regexp {^#} $line match]} {
	continue
    };  # end if

    # read line: SRC_ASN SRC_ROUTERIDX TARGET_ASN TARGET_ROUTERIDX
    regexp {([0-9]+) +([0-9]+) +([0-9]+) ([0-9]+)} $line match a1 r1 a2 r2

    # create the inter-AS link
    set ext($a1-$r1-$a2-$r2) [$ns duplex-link $rt($a1-$r1) $rt($a2-$r2) $opt(EXT_BW) $opt(EXT_DL) $opt(EXT_Qt)]

    # set the IPs
    set ipcurr [get_ip30 ipcnt_ext]
    set ip1 $opt(EXT_PREF).0.[expr $ipcurr + 1]
    set ip2 $opt(EXT_PREF).0.[expr $ipcurr + 2]
    tb-set-ip-link $rt($a1-$r1) $ext($a1-$r1-$a2-$r2) $ip1
    tb-set-ip-link $rt($a2-$r2) $ext($a1-$r1-$a2-$r2) $ip2

    # log
    set logarray(rt-$a-$r1,$ip1) rt-$a-$r2,$ip2
    set logarray(rt-$a-$r2,$ip2) rt-$a-$r1,$ip1

    # set the subnet masks
    tb-set-netmask $ext($a1-$r1-$a2-$r2) $opt(MASK_EXT)

};  # end while

# close the stream to the inter-AS link descriptor file
close $descfile


## EXPORT LOG

export_array_unix logarray $opt(LINKS_LOG)


## NETWORK INVOCATION

# have nodes run the appropriate start-up script
for {set a 1} {$a <= $opt(AS_NUM)} {incr a} {
    
    # routers
    for {set r 1} {$r <= $opt(AS_SIZE)} {incr r} {
	tb-set-node-startcmd $rt($a-$r) "$opt(RT_START_PROG) >& $opt(START_LOG)"
    };  # end for (counter r)
    
    # PCs
    for {set l 1} {$l <= $opt(LAN_NUM_AS)} {incr l} {
	for {set p 1} {$p <= $opt(LAN_SIZE)} {incr p} {
	    tb-set-node-startcmd $pc($a-$l-$p) "$opt(PC_START_PROG) >& $opt(START_LOG)"
	};  # end for (counter p)
    };  # end for (counter l)

};  # end for (counter a)

# go!
$ns run
